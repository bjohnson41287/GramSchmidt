#!/bin/bash
################################################################################
# File: prepare-commit-msg
#
# Author: Benjamin Johnson
#
# Version: 1.0
#
# Date Created: Thursday May 29, 2014
# Date Revised: Sunday October 12, 2014
#
# Description: Before the editor is displayed to the user, this script checks
#              each staged file name to ensure it conforms to standard naming
#              conventions. It then sets up a commit message using a template
#              file that is either passed in as an argument to
#
#                   git commit -t <file>
#
#              or is located in the "template" directory off of the project root
#              path. This populates each commit message with the name of each
#              staged file in the proper format the commit-msg hook expects. The
#              user is then free to add comments as needed.
################################################################################

#
# Load all of the staged files into an array and store the commit message file
# name
#
IFS_OLD=${IFS}
IFS=$'\n'

cmtFiles=(`git diff --cached --name-only`)
cmtFiles=(`printf "%s\n" "${cmtFiles[@]}" | sort`)

IFS=${IFS_OLD}

cmtMsgFile="$1"

#
# Store the absolute path of the project root directory and the commit message
# template file
#
PROJ_ROOT_PATH=`git rev-parse --show-toplevel`
templateFile="${PROJ_ROOT_PATH}/template/commitMsg.template"

#
# Define needed variables
#
fileHdrRegExp="^File: <filename>$"
fileHdrLineNums=3

#
# Ensure none of the files being committed violate naming conventions
#
checkCmtFileNames ()
{
    stgFileRegExp="^[[:alnum:]_-/.]+[^[:space:]/.]$"

    for stgFile in "${cmtFiles[@]}"; do
        if [[ ! "${stgFile}" =~ ${stgFileRegExp} ]] ||
           [ ! -z `echo "${stgFile}" | grep !` ]; then
            badFileNames[${#badFileNames[@]}]="${stgFile}"
        fi
    done

    if [ ${#badFileNames[@]} -gt 0 ]; then
        echo -en "\n\033[1mFiles Violating Naming Coventions:\033[0m\n"
        printf "%s\n" "${badFileNames[@]}"

        echo -en "\n\033[1mFile Name Conventions:\033[0m\n"
        echo "1. File names can contain alphanumeric characters, along with"
        echo -en "   \033[1m_\033[0m\033[1m-\033[0m\033[1m.\033[0m"
        echo -en " characters.\n"
        echo ""
        echo -en "2. File names can not end in \033[1m/\033[0m or "
        echo -en "\033[1m.\033[0m characters.\n"
        echo ""
        echo "3. File names can not contain other special characters or spaces."
        exit 1
    fi
}

#
# When a template file is used to populate the commit message, store all lines
# from the "File: <filename>" line to the end of the file in arrays
#
templateCmtMsgLines ()
{
    #
    # Store the lines that contain the file header template from the commit
    # message in an array
    #
    fileHdrLine=`grep -n "${fileHdrRegExp}" "${cmtMsgFile}" | \
                 sed -r 's|^([0-9]+).*$|\1|'`
    beforeFileHdrLine=$((${fileHdrLine}-1))
    readarray -n ${fileHdrLineNums} -s ${beforeFileHdrLine} \
              -t tmpFileHdr < "${cmtMsgFile}"

    #
    # Store every line after the file header template lines to the end of the
    # commit message file
    #
    readarray -s $((${beforeFileHdrLine}+${fileHdrLineNums})) \
              -t endMsg < "${cmtMsgFile}"
}

#
# When nothing is used to populate the commit message, store all of the lines in
# the template file before the file header line in an array and put all of the
# lines from the "File: <filename>" line to the end of the template file in a
# separate array
#
cmtMsgLines ()
{
    #
    # Store the lines before the file header template into an array
    #
    fileHdrLine=`grep -n "${fileHdrRegExp}" "${templateFile}" | \
                 sed -r 's|^([0-9]+).*$|\1|'`
    beforeFileHdrLine=$((${fileHdrLine}-1))
    readarray -n $((${beforeFileHdrLine}-1)) -t beginMsg < "${templateFile}"

    #
    # Store the lines that contain the file header template from the template
    # file in an array
    #
    readarray -s ${beforeFileHdrLine} -t tmpFileHdr < "${templateFile}"
}

#
# Loop through each staged file, forming the file header and appending it to the
# commit message file
#
printFileHdrs ()
{
    for file in "${cmtFiles[@]}"; do
        fileHdr[0]=`echo "${tmpFileHdr[0]}" | sed "s|<filename>|${file}|"`
        fileHdr[1]=$(yes `echo "${tmpFileHdr[1]}" | \
                     sed -r "s|\("${tmpFileHdr[1]}"\)|\1|"` \
                     | head -n ${#fileHdr[0]} | xargs printf "%s")
        fileHdr[2]="${tmpFileHdr[2]}"
        echo -en "\n"
        printf "%s\n" "${fileHdr[@]}"
    done
} >> "${cmtMsgFile}"

#
# Check to ensure none of the files being committed violate naming conventions
#
checkCmtFileNames

#
# This hook can take 1-3 parameters. The first is the name of the file that
# contains the commit message. The second is the source of the commit message
# and can be one of the following:
#   message  (if the -m of -F option was given)
#   template (if the -t option was given or the configuration option
#             commit.template is set)
#   merge    (if the commit is a merge or a .git/MERGE_MSG file exists)
#   squash   (if a .git/SQUASH_MSG file exists)
#
# The third argument is the commit SHA-1 hash if a -c, -C, or --amend option is
# given.
#
# A case statement is used to handle each of these cases.
#
case "$2" in
    message)
        #
        # Throw an warning since a one line commit message will not be able to
        # contain enough information to specify the changes made to each staged
        # file in the required format. Also assign stdin to the keyboard.
        #
        exec < /dev/tty

        echo -en "\n\033[1mWARNING:\033[0m\n"
        echo "The -m and -F options to the \"git commit\" command are not"
        echo "recommended due to the commit message format requirements and"
        echo "will result in a failed commit."
        echo ""
        echo "However, there are occasions where it is preferable to bypass the"
        echo "commit message format check, such as checking in many files into"
        echo "a new repository or making minor changes that do not require"
        echo "detailed expalanations for other users to understand. In these"
        echo -en "cases, the \033[4mcommit-msg\033[0m hook can be bypassed by "
        echo -en "passing the \033[1m-n\033[0m or\n"
        echo -en "\033[1m--no-verify\033[0m option to the \"git commit\" "
        echo -en "command.\n"
        echo ""
        echo -en "git commit \033[1m-n\033[0m -m \"Message...\"\n"
        echo -en "git commit \033[1m--no-verify\033[0m -m \"Message...\"\n"
        echo ""
        echo "If this is the user's intent, enter \"n\" or \"no\" at the prompt"
        echo "and rerun the commit by running one of the above commands."
        echo "Verify by entering \"y\" or \"yes\"."
        echo ""
        echo -en "\033[1mProceed with a one line commit message (y/n)?\033[0m "

        read oneLineMsgFlag

        case "${oneLineMsgFlag}" in
            y | yes)
                ;;
            n | no)
                echo -en "\nAborting commit\n"
                exit 1
                ;;
            *)
                echo -en "\nUnknown input \"${oneLineMsgFlag}\". "
                echo -en "Aborting commit.\n"
                exit 1
                ;;
        esac
        ;;
    template)
        #
        # Store each file header line and every other line to the end of the
        # commit message in arrays and delete these lines from the commit
        # message file
        #
        templateCmtMsgLines
        sed -i "${beforeFileHdrLine},$ d" "${cmtMsgFile}"

        #
        # Append the default commit message lines to the commit message file
        #
        printf "%s\n" "${endMsg[@]}" >> "${cmtMsgFile}"
        ;;
    merge)
        #
        # Nothing for now. Code may be added here later to do something
        # specific
        #
        ;;
    squash)
        #
        # Nothing for now. Code may be added here later to do something
        # specific
        #
        ;;
    *)
        #
        # Store every line in the default commit message in an array and delete
        # them from the file
        #
        readarray -t endMsg < "${cmtMsgFile}"
        sed -i "1,$ d" "${cmtMsgFile}"

        #
        # Store all lines from the template file and print the ones up to the
        # file header line to the commit message file
        #
        cmtMsgLines
        printf "%s\n" "${beginMsg[@]}" > "${cmtMsgFile}"

        #
        # Print default file headers for each file being committed and append
        # the default commit message lines to the end of the commit message file
        #
        printFileHdrs
        printf "%s\n" "${endMsg[@]}" >> "${cmtMsgFile}"
        ;;
esac

# More changes!
# End prepare-commit-msg
